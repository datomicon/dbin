{"version":3,"sources":["index.coffee"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"/source/","sourcesContent":["require(\"source-map-support\").install()\n\nmerge = require(\"lodash.merge\")\nrun = require(\"childish-process\")\n\n\nclass DBin # singleton\n\n  it = null\n  cfg: {}\n\n  @use: (opts) ->\n    # Note: calling use again could be made meaningful (e.g. upgrade / restart)\n    unless it?\n      unless opts?.defaults is false\n        @cfg = require(\"./defaults.json\")\n      merge(@cfg, opts)\n\n      home = if @cfg.homeDir then require(\"home-dir\").directory + \"/\" else \"\"\n      base_path = \"#{home}#{@cfg.located}/datomic-#{@cfg.edition}-#{@cfg.version}\"\n      alias_uri = \"#{@cfg.rest.alias} #{@cfg.transactor.uri}\"\n\n      unless @cfg.transactor.properties?\n        protocol = if @cfg.edition is \"free\" then \"free\" else \"dev\"\n        stp = \"#{base_path}/config/samples/#{protocol}-transactor-template.properties\"\n        @cfg.transactor.properties = stp\n      @cfg.transactor.cmd = \"#{base_path}/bin/transactor #{@cfg.transactor.properties}\"\n\n      @cfg.rest.cmd = \"#{base_path}/bin/rest -p #{@cfg.rest.port} #{alias_uri}\"\n      @cfg.rest.uri = \"http://localhost:#{@cfg.rest.port}\"\n      @cfg.rest.base = \"#{@cfg.rest.uri}/data/#{@cfg.rest.alias}/\"\n\n      @cfg.console.path ?= \"#{base_path}/bin/console\" # configurable (to elsewhere?)\n      @cfg.console.cmd = \"#{@cfg.console.path} -p #{@cfg.console.port} #{alias_uri}\"\n\n      it = new Datomic(@cfg)\n\n\n  class Datomic # private\n\n    constructor: (@cfg) -> @\n\n    run: (server) ->\n      serve = @cfg[server]\n      if serve?\n        serve.opts ?= {}\n        console.log(serve.cmd)\n        run(serve.cmd, serve.opts)\n      @\n\n\nmodule.exports = DBin\n"]}